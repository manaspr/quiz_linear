import 'package:flutter/material.dart';

void main() {
  runApp(const LinearQuiz());
}

class LinearQuiz extends StatelessWidget {
  const LinearQuiz({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        backgroundColor: Colors.grey.shade900,
        appBar: AppBar(
          title: const Text('‡¶ï‡ßÅ‡¶á‡¶ú'),
          backgroundColor: Colors.green,
          centerTitle: true,
        ),
        body: const SafeArea(
          child: Padding(
            padding: EdgeInsets.all(10.0),
            child: QuizPage(),
          ),
        ),
      ),
    );
  }
}

class QuizPage extends StatefulWidget {
  const QuizPage({Key? key}) : super(key: key);

  @override
  _QuizPageState createState() => _QuizPageState();
}

class _QuizPageState extends State<QuizPage> {
  List<Icon> scoreKeeper = [];
  List<String> questions = [
    '‡¶≠‡¶æ‡¶∞‡¶§‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶ì‡¶°‡¶ø‡¶Ü‡¶á (‡¶ï‡ßç‡¶∞‡¶ø‡¶ï‡ßá‡¶ü) ‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º ‡¶Ü‡¶π‡¶Æ‡ßá‡¶¶‡¶æ‡¶¨‡¶æ‡¶¶‡ßá‡•§',
    '‡¶ó‡ßã‡¶Ø‡¶º‡¶æ ‡¶®‡¶æ‡¶∞‡¶ï‡ßá‡¶≤ ‡¶â‡ßé‡¶™‡¶æ‡¶¶‡¶® ‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶ñ‡ßç‡¶Ø‡¶æ‡¶§‡•§',
    '‡¶™‡ßã‡¶≤‡ßã‡¶∞ ‡¶â‡ßé‡¶™‡¶§‡ßç‡¶§‡¶ø ‡¶Ü‡¶∏‡¶æ‡¶Æ‡ßá‡•§',
    '‡¶ñ‡¶æ‡¶≤‡¶∏‡¶æ 1699 ‡¶∏‡¶æ‡¶≤‡ßá ‡¶ú‡¶®‡ßç‡¶Æ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡ßá‡¶®‡•§',
    '‡¶≤‡¶§‡¶æ ‡¶Æ‡¶ô‡ßç‡¶ó‡ßá‡¶∂‡¶ï‡¶∞ 1960 ‡¶∏‡¶æ‡¶≤‡ßá ‡¶™‡¶¶‡ßç‡¶Æ‡¶≠‡ßÇ‡¶∑‡¶£ ‡¶ú‡¶ø‡¶§‡ßá‡¶õ‡¶ø‡¶≤‡ßá‡¶®‡•§',
    '‡¶∂‡ßá‡¶ï‡ßç‡¶∏‡¶™‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ 37‡¶ü‡¶ø ‡¶®‡¶æ‡¶ü‡¶ï ‡¶≤‡¶ø‡¶ñ‡ßá‡¶õ‡ßá‡¶®‡•§',
    '‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶ì‡¶°‡¶ø‡¶Ü‡¶á ‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º ‡¶¶‡¶≤‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ö‡¶ß‡¶ø‡¶®‡¶æ‡¶Ø‡¶º‡¶ï ‡¶õ‡¶ø‡¶≤‡ßá‡¶® ‡¶∏‡ßÅ‡¶®‡ßÄ‡¶≤ ‡¶ó‡¶æ‡¶≠‡¶æ‡¶∏‡ßç‡¶ï‡¶æ‡¶∞‡•§',
    '‡¶¨‡ßá‡¶∏‡¶¨‡¶≤‡ßá‡¶∞ ‡¶â‡ßé‡¶™‡¶§‡ßç‡¶§‡¶ø ‡¶Ö‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶Ø‡¶º‡•§',
    '‡¶Ü‡¶á‡¶∏ ‡¶π‡¶ï‡¶ø‡¶§‡ßá ‡¶´‡¶æ‡¶â‡¶≤ ‡¶¨‡ßã‡¶ù‡¶æ‡¶§‡ßá ‡¶≤‡¶æ‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨‡ßÅ‡¶ú ‡¶¨‡¶æ‡¶§‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡•§',
    '‡¶â‡¶ü‡¶™‡¶æ‡¶ñ‡¶ø‡¶∞ ‡¶ö‡ßã‡¶ñ ‡¶§‡¶æ‡¶∞ ‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï‡ßá‡¶∞ ‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶õ‡ßã‡¶ü‡•§',
    '‡¶â‡¶¶‡ßç‡¶≠‡¶ø‡¶¶ ‡¶¨‡¶æ‡¶Ø‡¶º‡ßÅ‡¶Æ‡¶£‡ßç‡¶°‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶ï‡ßç‡¶∏‡¶ø‡¶ú‡ßá‡¶® ‡¶™‡¶∞‡ßç‡¶Ø‡¶¨‡ßá‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßá‡•§',
    '‡¶≠‡¶æ‡¶∞‡¶§‡ßá‡¶∞ ‡¶Ö‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶•‡¶≤‡ßá‡¶ü‡¶ø‡¶ï‡ßç‡¶∏ ‡¶´‡ßá‡¶°‡¶æ‡¶∞‡ßá‡¶∂‡¶® 1946 ‡¶∏‡¶æ‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡¶≤‡•§',
    '‡¶∞‡¶æ‡¶Æ‡¶æ‡¶Ø‡¶º‡¶£ ‡¶∞‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‡¶≤‡ßá‡¶® ‡¶§‡ßÅ‡¶≤‡¶∏‡ßÄ‡¶¶‡¶æ‡¶∏‡•§',
    '‡¶®‡¶ï‡ßç‡¶∑‡¶§‡ßç‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º ‡ß®‡ß≠‡¶ü‡¶ø‡•§',
    '‡¶™‡¶∂‡ßç‡¶ö‡¶ø‡¶Æ‡¶¨‡¶ô‡ßç‡¶ó‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞‡¶¨‡¶® ‡¶π‡¶æ‡¶§‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶ñ‡ßç‡¶Ø‡¶æ‡¶§‡•§',
    '‡¶¨‡ßà‡¶¶‡¶ø‡¶ï ‡¶ú‡ßç‡¶Ø‡ßã‡¶§‡¶ø‡¶∑‡¶∂‡¶æ‡¶∏‡ßç‡¶§‡ßç‡¶∞ ‡¶∏‡ßå‡¶∞‡¶ú‡¶ó‡¶§‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞ ‡¶ï‡¶∞‡ßá‡•§',
    '‡¶∏‡¶æ‡¶¨‡¶ø‡¶∞ ‡¶≠‡¶æ‡¶ü‡¶ø‡¶Ø‡¶º‡¶æ ‡¶π‡¶ü‡¶Æ‡ßá‡¶á‡¶≤‡ßá‡¶∞ ‡¶∏‡¶π-‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶§‡¶æ ‡¶õ‡¶ø‡¶≤‡ßá‡¶®‡•§',
    '‡¶ï‡¶æ‡¶∂‡ßç‡¶Æ‡ßÄ‡¶∞‡ßá‡¶∞ ‡¶â‡¶≤‡¶æ‡¶∞ ‡¶π‡ßç‡¶∞‡¶¶ ‡¶≠‡¶æ‡¶∞‡¶§‡ßá‡¶∞ ‡¶¨‡ßÉ‡¶π‡¶§‡ßç‡¶§‡¶Æ ‡¶Æ‡¶ø‡¶†‡¶æ ‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶π‡ßç‡¶∞‡¶¶‡•§',
    '‡¶∂‡¶¨‡ßç‡¶¶ ‡¶§‡¶∞‡¶ô‡ßç‡¶ó ‡¶Ü‡¶≤‡ßã‡¶∞ ‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶≠‡ßç‡¶∞‡¶Æ‡¶£ ‡¶ï‡¶∞‡ßá‡•§',
  ];
  void questionIndexUp() {
    if (questionNumber < questions.length - 1) {
      questionNumber++;
    } else {
      questions.add('üíì ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶‡•§ ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡ßü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§ üíì');
    }
  }

  int questionNumber = 0;
  List<bool> answers = [
    true,
    true,
    false,
    true,
    false,
    true,
    false,
    false,
    false,
    false,
    false,
    true,
    false,
    true,
    false,
    false,
    true,
    true,
    false,
  ];
  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        Expanded(
          flex: 5,
          child: Padding(
            padding: const EdgeInsets.all(10.0),
            child: Center(
              child: Text(
                questions[questionNumber],
                textAlign: TextAlign.center,
                style: const TextStyle(
                  fontSize: 25,
                  color: Colors.white,
                ),
              ),
            ),
          ),
        ),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(15.0),
            child: FlatButton(
              color: Colors.green,
              child: const Text(
                '‡¶∏‡¶§‡ßç‡¶Ø',
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontSize: 20.0,
                  color: Colors.white,
                ),
              ),
              onPressed: () {
                bool correctAnswer = answers[questionNumber];
                setState(() {
                  if (correctAnswer == true) {
                    scoreKeeper.add(const Icon(
                      Icons.check,
                      color: Colors.green,
                    ));
                  } else {
                    scoreKeeper.add(const Icon(
                      Icons.close,
                      color: Colors.red,
                    ));
                  }
                  questionIndexUp();
                });
              },
            ),
          ),
        ),
        Expanded(
          child: Padding(
            padding: EdgeInsets.all(15.0),
            child: FlatButton(
                color: Colors.red,
                child: const Text(
                  '‡¶Æ‡¶ø‡¶•‡ßç‡¶Ø‡¶æ',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    fontSize: 20.0,
                    color: Colors.white,
                  ),
                ),
                onPressed: () {
                  bool correctAnswer = answers[questionNumber];
                  setState(() {
                    if (correctAnswer == false) {
                      scoreKeeper.add(const Icon(
                        Icons.check,
                        color: Colors.green,
                      ));
                    } else {
                      scoreKeeper.add(const Icon(
                        Icons.close,
                        color: Colors.red,
                      ));
                    }
                    questionIndexUp();
                  });
                }),
          ),
        ),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(15.0),
            child: Center(
              child: FlatButton(
                  color: Colors.blue,
                  child: const Icon(
                    Icons.restore,
                    color: Colors.white,
                  ),
                  onPressed: () {
                    setState(() {
                      questionNumber = 0;
                      scoreKeeper = [];
                    });
                  }),
            ),
          ),
        ),
        Row(children: scoreKeeper),
      ],
    );
  }
}
